name: Java CI/CD for Pahana Edu Billing System

on:
  push:
    branches:
      - Development
      - QA
      - Regression
      - main
  pull_request:
    branches:
      - Development  # Added for completeness
      - QA
      - Regression
      - main

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to latest version

      - name: Set up JDK 17
        uses: actions/setup-java@v4  # Updated to latest
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4  # Updated to latest
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven (skip tests)
        run: mvn -B clean package -DskipTests --file pom.xml  # Added -DskipTests to avoid running tests here

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4  # Added cache for test job
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4  # Added to download build artifact
        with:
          name: app-jar
          path: target/

      - name: Run tests with Maven
        run: mvn test --file pom.xml
        # Temporary skip for specific test (uncomment if needed):
        # run: mvn test -Dtest=!BillingServiceTest --file pom.xml  # Replace with your failing test class

  deploy:
    name: Deploy (only on main)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulate Deployment
        run: |
          echo "ðŸŽ‰ Deployment started..."
          echo "Deploying to production environment (Tomcat, FTP, server, etc.)"
          echo "âœ… Deployment successful!"
  
